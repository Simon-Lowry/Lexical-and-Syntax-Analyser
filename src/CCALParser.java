/* CCALParser.java */
/* Generated By:JavaCC: Do not edit this line. CCALParser.java */
public class CCALParser implements CCALParserConstants {
        public static void main(String args[]) {
                CCALParser parser;
                if (args.length == 0) {
                        System.out.println("CCAL Parser: Reading from standard input . . .");
                        parser = new CCALParser(System.in);
                } else if (args.length == 1) {
                        System.out.println("CCAL Parser: Reading from file " + args[0] + " . . .");
                        try {
                                parser = new CCALParser(new java.io.FileInputStream(args[0]));
                        } catch (java.io.FileNotFoundException e) {
                                System.out.println("CCAL Parser: File " + args[0] + " not found.");
                                return;
                        }
                } else {
                        System.out.println("CCAL Parser: Usage is one of:");
                        System.out.println(" java CCALParser < inputfile");
                        System.out.println("OR");
                        System.out.println(" java CCALParser inputfile");
                        return;
                }


                try {
                        parser.start();
                        System.out.println("CCAL Parser: SLP program parsed successfully.");
                } catch (ParseException e) {
                        System.out.println(e.getMessage());
                        System.out.println("CCAL Parser: Encountered errors during parse.");
                }


        }

  static final public void start() throws ParseException {
    program();
  }

  static final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case CONST:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      decl_list();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      function_list();
    }
    main();
  }

  static final public void decl_list() throws ParseException {
    decl();
    jj_consume_token(SEMI_COLON);
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      var_decl();
      break;
      }
    case CONST:{
      const_decl();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* 4 */
  static final public void var_decl() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type();
  }

/* 5 */
  static final public void const_decl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type();
    jj_consume_token(ASSIGN);
    expression();
  }

  static final public void function_list() throws ParseException {
    function();
  }

  static final public void function() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFT_BRACKET);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      parameter_list();
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(IS);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case CONST:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      decl_list();
    }
    jj_consume_token(BEGIN);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case BEGIN:
      case SKIPS:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      statement_block();
    }
    jj_consume_token(RETURN);
    jj_consume_token(LEFT_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case LEFT_BRACKET:
    case MINUS:
    case IDENTIFIER:
    case NUMBER:{
      expression();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(SEMI_COLON);
    jj_consume_token(END);
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parameter_list() throws ParseException {
    nemp_parameter_list();
  }

  static final public void nemp_parameter_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      nemp_parameter_list();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(BEGIN);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case CONST:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      decl_list();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case BEGIN:
      case SKIPS:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      statement_block();
    }
    jj_consume_token(END);
  }

  static final public void statement_block() throws ParseException {
    statement();
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        expression();
        jj_consume_token(SEMI_COLON);
        break;
        }
      case LEFT_BRACKET:{
        jj_consume_token(LEFT_BRACKET);
        arg_list();
        jj_consume_token(RIGHT_BRACKET);
        jj_consume_token(SEMI_COLON);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case BEGIN:{
      jj_consume_token(BEGIN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case SKIPS:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        statement_block();
      }
      jj_consume_token(END);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      condition();
      jj_consume_token(BEGIN);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case SKIPS:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_9;
        }
        statement_block();
      }
      jj_consume_token(END);
      jj_consume_token(ELSE);
      jj_consume_token(BEGIN);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case SKIPS:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_10;
        }
        statement_block();
      }
      jj_consume_token(END);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(BEGIN);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case SKIPS:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_11;
        }
        statement_block();
      }
      jj_consume_token(END);
      break;
      }
    case SKIPS:{
      jj_consume_token(SKIPS);
      jj_consume_token(SEMI_COLON);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    fragment();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_12;
      }
      binary_arith_op();
      fragment();
    }
  }

  static final public void binary_arith_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case LEFT_BRACKET:{
      jj_consume_token(LEFT_BRACKET);
      expression();
      jj_consume_token(RIGHT_BRACKET);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      otherCondition();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    simpleCondition();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      operators();
      simpleCondition();
    }
  }

  static final public void simpleCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDA:{
      jj_consume_token(TILDA);
      condition();
      break;
      }
    case LEFT_BRACKET:{
      jj_consume_token(LEFT_BRACKET);
      condition();
      jj_consume_token(RIGHT_BRACKET);
      break;
      }
    case TRUE:
    case FALSE:
    case MINUS:
    case IDENTIFIER:
    case NUMBER:{
      expression();
      comp_op();
      expression();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void otherCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_BRACKET:{
      jj_consume_token(LEFT_BRACKET);
      arg_list();
      jj_consume_token(RIGHT_BRACKET);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      arg_list();
    }
  }

  static final public void operators() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      jj_consume_token(OR);
      break;
      }
    case AND:{
      jj_consume_token(AND);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comp_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:{
      jj_consume_token(EQUALS);
      break;
      }
    case NOT_EQUAL:{
      jj_consume_token(NOT_EQUAL);
      break;
      }
    case LESS_THAN:{
      jj_consume_token(LESS_THAN);
      break;
      }
    case LESS_THAN_OR_EQUAL:{
      jj_consume_token(LESS_THAN_OR_EQUAL);
      break;
      }
    case GREATER_THAN:{
      jj_consume_token(GREATER_THAN);
      break;
      }
    case GREATER_THAN_OR_EQUAL:{
      jj_consume_token(GREATER_THAN_OR_EQUAL);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arg_list() throws ParseException {
    nemp_arg_list();
  }

  static final public void nemp_arg_list() throws ParseException {
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_14;
      }
      jj_consume_token(IDENTIFIER);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CCALParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc00,0xe000,0xc00,0x0,0xc00,0x2620000,0x40180000,0xe000,0x4000000,0xc00,0x2620000,0x60000000,0x2620000,0x2620000,0x2620000,0x2620000,0x2620000,0x0,0x0,0x0,0x40180000,0x0,0x40180000,0x40000000,0x0,0x0,0x0,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x800,0x0,0x800,0x2802,0x0,0x0,0x0,0x800,0x0,0x800,0x800,0x800,0x800,0x800,0x3,0x3,0x2800,0x2802,0x18,0x2806,0x0,0x18,0x7e0,0x800,0x0,};
   }

  /** Constructor with InputStream. */
  public CCALParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCALParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CCALParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CCALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CCALParser(CCALParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CCALParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
